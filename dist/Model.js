// Generated by CoffeeScript 1.10.0
(function() {
  var KanikuModel, _,
    slice = [].slice;

  _ = require('lodash');

  module.exports = KanikuModel = (function() {
    function KanikuModel(args) {
      _.assignIn(this, this.getDefaults(), args);
      this._listeners = {};
    }

    KanikuModel.defaults = function(defaults) {
      var k, results, v;
      this.prototype.getDefaults = function() {
        return defaults;
      };
      results = [];
      for (k in defaults) {
        v = defaults[k];
        results.push((function(_this) {
          return function(k, v) {
            _this.prototype[k] = v;
            _this.prototype["get" + (_.upperFirst(_.camelCase(k)))] = function() {
              return this[k];
            };
            return _this.prototype["set" + (_.upperFirst(_.camelCase(k)))] = function(newValue) {
              this.emit("change:" + k, newValue, {
                was: this[k],
                key: k
              });
              return this[k] = newValue;
            };
          };
        })(this)(k, v));
      }
      return results;
    };

    KanikuModel.useUpdates = function(value) {
      if (value == null) {
        value = true;
      }
      return this.prototype.needsUpdating = value;
    };

    KanikuModel.prototype.needsUpdating = false;

    KanikuModel.prototype.on = function() {
      var base, i, j, key, keys, len, listener, name;
      keys = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), listener = arguments[i++];
      for (j = 0, len = keys.length; j < len; j++) {
        key = keys[j];
        if ((base = this._listeners)[name = "change:" + key] == null) {
          base[name] = [];
        }
        this._listeners["change:" + key].push(listener);
      }
    };

    KanikuModel.prototype.removeListener = function() {
      var i, j, key, keys, len, listener;
      keys = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), listener = arguments[i++];
      for (j = 0, len = keys.length; j < len; j++) {
        key = keys[j];
        _.pull(this._listeners["change:" + key], listener);
      }
    };

    KanikuModel.prototype.emit = function() {
      var args, i, len, listenKey, listener, ref;
      listenKey = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (listenKey.includes(':')) {
        this.emit(listenKey.split(':').slice(0, -1).join(':'));
      }
      if (this._listeners[listenKey] != null) {
        ref = this._listeners[listenKey];
        for (i = 0, len = ref.length; i < len; i++) {
          listener = ref[i];
          listener.apply(null, args);
        }
      }
    };

    KanikuModel.prototype.getDefaults = function() {
      return {};
    };

    KanikuModel.prototype.getData = function() {
      return _.assign(_.clone(this.getDefaults()), this);
    };

    KanikuModel.prototype.update = function(dt) {};

    return KanikuModel;

  })();

}).call(this);
